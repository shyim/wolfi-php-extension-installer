#!/usr/bin/env sh

set -o errexit
set -o nounset

arch=""
phpVersion=$(php -r 'echo PHP_MAJOR_VERSION . PHP_MINOR_VERSION;')
phpVersionDot=$(php -r 'echo PHP_MAJOR_VERSION . "." . PHP_MINOR_VERSION;')
phpModuleDir="/usr/lib/php/modules/"
phpConfDir="/etc/php/conf.d/"

case $(uname -m) in
    aarch64 | arm64 | armv8)
        arch=arm64
        ;;
    *)
        arch=amd64
        ;;
esac

if [ ! -e /usr/lib/php/modules/ ]; then
    mkdir -p /usr/lib/php/modules/
fi

if ! which curl 1> /dev/null 2> /dev/null; then
    apk add --no-cache curl
fi

currentDir=$(pwd)

requiredWolfiPackages=""

while :; do
    if test $# -lt 1; then
        break
    fi

    case $1 in 
        blackfire)
            if [ -e "$phpConfDir/blackfire.ini" ]; then
                echo "blackfire already installed, skipping";
            else
                tmpDir=$(mktemp -d)
                cd "$tmpDir"
                curl -sSLf --user-agent Docker "https://blackfire.io/api/v1/releases/probe/php/linux/$arch/$phpVersion" | tar xz
                mv blackfire*.so "$phpModuleDir/blackfire.so"
        
                echo "extension=blackfire.so" > "$phpConfDir/blackfire.ini"
                echo "blackfire.agent_socket=tcp://blackfire:8307" >> "$phpConfDir/blackfire.ini"
                cd "$currentDir"
                rm -rf "$tmpDir"
                echo "Installed blackfire"
            fi
            ;;
        tideways)
            if [ -e "$phpConfDir/tideways.ini" ]; then
                    echo "tideways already installed, skipping";
            else
                tidewaysArch=$arch

                if [ $tidewaysArch == "amd64" ]; then
                    tidewaysArch="x86_64"
                fi

                url=$(curl -sSLf -o - https://tideways.com/profiler/downloads | grep -Eo "\"[^\"]+/tideways-php-([0-9]+\.[0-9]+\.[0-9]+)-$tidewaysArch.tar.gz\"" | cut -d'"' -f2)
                
                if [ $url == "" ]; then
                    echo "Could not gather download link from Tideways. Please open a Issue"
                    exit 1
                fi

                tmpDir=$(mktemp -d)
                cd "$tmpDir"

                curl -sSLf --user-agent Docker $url | tar xz

                cd tideways*

                mv "tideways-php-$phpVersionDot.so" "$phpModuleDir/tideways.so"
                echo "extension=tideways.so" > "$phpConfDir/tideways.ini"

                cd "$currentDir"
                rm -rf "$tmpDir"
                echo "Installed tideways"
            fi
            ;;
        relay)
            if [ -e "$phpConfDir/relay.ini" ]; then
                echo "relay already installed, skipping";
            else
                extVersion="$(curl -sSLf https://builds.r2.relay.so/meta/latest)"
                extVersion="${extVersion#v}"

                relayArch=$arch

                if [ $relayArch == "amd64" ]; then
                    relayArch="x86-64"
                else
                    relayArch="aarch64"
                fi

                url="https://builds.r2.relay.so/v${extVersion}/relay-v${extVersion}-php${phpVersionDot}-debian-${relayArch}+libssl3.tar.gz"

                tmpDir=$(mktemp -d)
                cd "$tmpDir"
                
                curl -sSLf --user-agent Docker "$url" | tar xz

                cd relay*
                mv relay-pkg.so "$phpModuleDir/relay.so"

                # same as https://github.com/mlocati/docker-php-extension-installer/blob/master/install-php-extensions#L3514
                sed -i "s/00000000-0000-0000-0000-000000000000/$(cat /proc/sys/kernel/random/uuid)/" "$phpModuleDir/relay.so"
                echo "extension=relay.so" > "$phpConfDir/relay.ini"
                grep -vE '^[ \t]*extension[ \t]*=' relay.ini >> "$phpConfDir/relay.ini"

                requiredWolfiPackages="$requiredWolfiPackages liblz4-1 libzstd1 php-${phpVersionDot}-msgpack php-${phpVersionDot}-igbinary"

                rm -rf "$tmpDir"
                cd "$currentDir"
                echo "Installed relay ${extVersion}"
            fi
            ;;
        *)
            echo "Is unsupported right now. feel free to make a Issue"
            ;;
    esac

    shift
done

if [ "$requiredWolfiPackages" != "" ]; then
    apk add --no-cache $requiredWolfiPackages
fi